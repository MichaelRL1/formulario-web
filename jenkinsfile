def PROJECT_ID = "fluid-analogy-302119"
def PROJECT_NAME = "formulario-web"


pipeline {
  options {
    timeout (time: 35, unit:"MINUTES")
  }
  agent {
    kubernetes {
      label "${PROJECT_NAME}"
      defaultContainer "jnlp"
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    component: ci
spec:
  serviceAccount: cd-jenkins
  volumes:
  - name: dockersock
    hostPath:
      path: "/var/run/docker.sock"
  - name: docker
    hostPath:
      path: "/usr/bin/docker"
  - name: google-cloud-key
    secret:
      secretName: registry-jenkins
  containers:
  - name: gcloud
    image: gcr.io/cloud-builders/gcloud
    volumeMounts:
    - name: google-cloud-key
      readOnly: true
      mountPath: "/var/secrets/google"
    - name: docker
      mountPath: "/usr/bin/docker"
    - name: dockersock
      mountPath: "/var/run/docker.sock"
    command:
    - cat
    env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /var/secrets/google/key.json
    tty: true
  - name: node
    image: node:lts-alpine
    env:
    - name: NO_PROXY
      value: "localhost, 0.0.0.0/4201, 0.0.0.0/9876"
    - name: CHROME_BIN
      value: /usr/bin/chromium-browser
    command:
    - cat
    tty: true
  - name: docker
    image: docker:19.03
    volumeMounts:
    - name: google-cloud-key
      readOnly: true
      mountPath: "/var/secrets/google"
    - name: docker
      mountPath: "/usr/bin/docker"
    - name: dockersock
      mountPath: "/var/run/docker.sock"
    command:
    - cat
    env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /var/secrets/google/key.json
    tty: true
"""
    }
  }
  environment {
    TAG_NAME = sh (
      returnStdout: true,
      script: 'git tag --points-at HEAD | awk NF'
    ).trim()
  }
  stages {
    stage("Initialize") {
      steps {
        container('gcloud') {
          sh 'gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS'
          sh "gcloud config set project ${PROJECT_ID}"
        }
        container('docker') {
          sh "apk update"
          sh "apk add curl"
          sh "curl -fsSL https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v2.0.0/docker-credential-gcr_linux_amd64-2.0.0.tar.gz | tar xz --to-stdout ./docker-credential-gcr > /usr/bin/docker-credential-gcr && chmod +x /usr/bin/docker-credential-gcr"
          sh "docker-credential-gcr configure-docker"
          sh 'docker --version'
        }
        container("node") {
          sh "node -v"
          sh "npm -v"
          sh "npm install -g @angular/cli@latest"
          sh "apk update && apk upgrade --update --available && apk add --no-cache && echo http://nl.alpinelinux.org/alpine/v3.10/main >> /etc/apk/repositories && echo http://nl.alpinelinux.org/alpine/v3.10/community >> /etc/apk/repositories && apk add --no-cache chromium nss freetype harfbuzz ttf-freefont"


        }
      }
    }

    stage("Build") {
      steps {
        container("node") {
          sh "npm install"
          sh "ng --version"
        }
      }
    }
    stage ("Build Project web") {
      stages {
        stage ('build develop') {
          when { branch 'develop'}
          steps{
            container("node") {
              sh "ng build"
              sh "ls"
              sh "ls ./dist"
            }
          }
        }
      }
    }

    stage ("Build Image Docker") {
      when { branch 'develop'}      
      steps {
        container("docker"){
          sh "docker build --tag=${JOB_NAME}:${BUILD_NUMBER} ."
          sh "docker images"
        }
      }
    }

    stage("Publish Project web") {
      when { branch 'develop'}      
      steps {
        container("docker") {
          sh "docker tag ${JOB_NAME}:${BUILD_NUMBER} gcr.io/${PROJECT_ID}/${JOB_NAME}:${BUILD_NUMBER}"
          sh "docker push gcr.io/${PROJECT_ID}/${JOB_NAME}:${BUILD_NUMBER}"
        }
      }
    }

    stage("Deploy Bucket front") {
      when { branch 'develop' }
      steps {
        container("gcloud") {
          sh "gsutil -m rm -r gs://frontend-static-front/formulario-web"
          sh "gsutil -m cp -r ./dist/demo gs://frontend-static-front/formulario-web"
          echo "Pipeline currentResult: ${currentBuild.currentResult}"
        }
      }
    }
        stage('Deploy web vm') {
      when { branch 'develop' }
      steps {
        container("gcloud") {
          sh "gcloud config set project ${PROJECT_ID}"
          sh "gcloud compute instance-templates create-with-container \
            tmpl-ig-formulario-${BUILD_NUMBER} \
            --container-image gcr.io/${PROJECT_ID}/${JOB_NAME}:${BUILD_NUMBER} \
            --machine-type f1-micro \
            --network develop-red \
            --subnet develop-sub \
            --tags http-server \
            --no-address \
            --region us-central1"
          sh "gcloud compute instance-groups managed rolling-action \
            start-update ig-formulario \
            --version template=tmpl-ig-formulario-${BUILD_NUMBER} \
            --zone us-central1-a"
        }
      }
    }

   
    
    
  }
  post {
    always {
      echo "Pipeline currentResult: ${currentBuild.currentResult}"
      echo "Pipeline Finalizado"
    }
    aborted {
      echo "Pipeline Abortado"
    }
    failure {
      echo "Pipeline Fallido"
    }
    success {
      echo "Pipeline Exitoso!!"
    }
  }
}
